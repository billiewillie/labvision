import 'vue-fast-marquee/style.css';
declare const _default: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        style: {
            type: import("vue").PropType<import("vue").CSSProperties>;
        };
        class: {
            type: import("vue").PropType<any>;
        };
        autoFill: {
            type: import("vue").PropType<boolean>;
        };
        play: {
            type: import("vue").PropType<boolean>;
        };
        pauseOnHover: {
            type: import("vue").PropType<boolean>;
        };
        pauseOnClick: {
            type: import("vue").PropType<boolean>;
        };
        direction: {
            type: import("vue").PropType<"left" | "right" | "up" | "down">;
        };
        speed: {
            type: import("vue").PropType<number>;
        };
        delay: {
            type: import("vue").PropType<number>;
        };
        loop: {
            type: import("vue").PropType<number>;
        };
        gradient: {
            type: import("vue").PropType<boolean>;
        };
        gradientColor: {
            type: import("vue").PropType<string>;
        };
        gradientWidth: {
            type: import("vue").PropType<string | number>;
        };
    }>> & {
        onFinish?: (() => any) | undefined;
        onCycleComplete?: (() => any) | undefined;
    }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        finish: () => void;
        cycleComplete: () => void;
    }, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        style: {
            type: import("vue").PropType<import("vue").CSSProperties>;
        };
        class: {
            type: import("vue").PropType<any>;
        };
        autoFill: {
            type: import("vue").PropType<boolean>;
        };
        play: {
            type: import("vue").PropType<boolean>;
        };
        pauseOnHover: {
            type: import("vue").PropType<boolean>;
        };
        pauseOnClick: {
            type: import("vue").PropType<boolean>;
        };
        direction: {
            type: import("vue").PropType<"left" | "right" | "up" | "down">;
        };
        speed: {
            type: import("vue").PropType<number>;
        };
        delay: {
            type: import("vue").PropType<number>;
        };
        loop: {
            type: import("vue").PropType<number>;
        };
        gradient: {
            type: import("vue").PropType<boolean>;
        };
        gradientColor: {
            type: import("vue").PropType<string>;
        };
        gradientWidth: {
            type: import("vue").PropType<string | number>;
        };
    }>> & {
        onFinish?: (() => any) | undefined;
        onCycleComplete?: (() => any) | undefined;
    }, {}, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        style: {
            type: import("vue").PropType<import("vue").CSSProperties>;
        };
        class: {
            type: import("vue").PropType<any>;
        };
        autoFill: {
            type: import("vue").PropType<boolean>;
        };
        play: {
            type: import("vue").PropType<boolean>;
        };
        pauseOnHover: {
            type: import("vue").PropType<boolean>;
        };
        pauseOnClick: {
            type: import("vue").PropType<boolean>;
        };
        direction: {
            type: import("vue").PropType<"left" | "right" | "up" | "down">;
        };
        speed: {
            type: import("vue").PropType<number>;
        };
        delay: {
            type: import("vue").PropType<number>;
        };
        loop: {
            type: import("vue").PropType<number>;
        };
        gradient: {
            type: import("vue").PropType<boolean>;
        };
        gradientColor: {
            type: import("vue").PropType<string>;
        };
        gradientWidth: {
            type: import("vue").PropType<string | number>;
        };
    }>> & {
        onFinish?: (() => any) | undefined;
        onCycleComplete?: (() => any) | undefined;
    }, {}, {}, {}, {}, {}>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    style: {
        type: import("vue").PropType<import("vue").CSSProperties>;
    };
    class: {
        type: import("vue").PropType<any>;
    };
    autoFill: {
        type: import("vue").PropType<boolean>;
    };
    play: {
        type: import("vue").PropType<boolean>;
    };
    pauseOnHover: {
        type: import("vue").PropType<boolean>;
    };
    pauseOnClick: {
        type: import("vue").PropType<boolean>;
    };
    direction: {
        type: import("vue").PropType<"left" | "right" | "up" | "down">;
    };
    speed: {
        type: import("vue").PropType<number>;
    };
    delay: {
        type: import("vue").PropType<number>;
    };
    loop: {
        type: import("vue").PropType<number>;
    };
    gradient: {
        type: import("vue").PropType<boolean>;
    };
    gradientColor: {
        type: import("vue").PropType<string>;
    };
    gradientWidth: {
        type: import("vue").PropType<string | number>;
    };
}>> & {
    onFinish?: (() => any) | undefined;
    onCycleComplete?: (() => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    finish: () => void;
    cycleComplete: () => void;
}, string, {}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
});
export default _default;
