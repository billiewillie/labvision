import { ComponentOptionsMixin } from 'vue-demi';
import { DefineComponent } from 'vue-demi';
import { Mode } from 'vanilla-jsoneditor';
import { Plugin as Plugin_2 } from 'vue-demi';
import { PropType as PropType_2 } from 'vue-demi';
import { PublicProps } from 'vue-demi';
import { RendererElement } from 'vue-demi';
import { RendererNode } from 'vue-demi';

declare const _default: SFCWithInstall<DefineComponent<    {
modelValue: object;
value: object;
} & {
mode: {
type: PropType_2<Mode>;
};
debounce: {
type: PropType_2<number>;
};
stringified: {
type: PropType_2<boolean>;
default: undefined;
};
} & {
mainMenuBar: {
type: PropType_2<boolean>;
default: undefined;
};
navigationBar: {
type: PropType_2<boolean>;
default: undefined;
};
statusBar: {
type: PropType_2<boolean>;
default: undefined;
};
askToFormat: {
type: PropType_2<boolean>;
default: undefined;
};
readOnly: {
type: PropType_2<boolean>;
default: undefined;
};
escapeControlCharacters: {
type: PropType_2<boolean>;
default: undefined;
};
escapeUnicodeCharacters: {
type: PropType_2<boolean>;
default: undefined;
};
flattenColumns: {
type: PropType_2<boolean>;
default: undefined;
};
}, () => globalThis.VNode<RendererNode, RendererElement, {
[key: string]: any;
}>, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
[x: string]: (_payload: any) => boolean;
'update:mode': (_payload: Mode) => boolean;
}, string, PublicProps, Readonly<globalThis.ExtractPropTypes<{
modelValue: object;
value: object;
} & {
mode: {
type: PropType_2<Mode>;
};
debounce: {
type: PropType_2<number>;
};
stringified: {
type: PropType_2<boolean>;
default: undefined;
};
} & {
mainMenuBar: {
type: PropType_2<boolean>;
default: undefined;
};
navigationBar: {
type: PropType_2<boolean>;
default: undefined;
};
statusBar: {
type: PropType_2<boolean>;
default: undefined;
};
askToFormat: {
type: PropType_2<boolean>;
default: undefined;
};
readOnly: {
type: PropType_2<boolean>;
default: undefined;
};
escapeControlCharacters: {
type: PropType_2<boolean>;
default: undefined;
};
escapeUnicodeCharacters: {
type: PropType_2<boolean>;
default: undefined;
};
flattenColumns: {
type: PropType_2<boolean>;
default: undefined;
};
}>> & {
[x: `on${Capitalize<string>}`]: ((_payload: any) => any) | undefined;
}, {
stringified: boolean;
mainMenuBar: boolean;
navigationBar: boolean;
statusBar: boolean;
askToFormat: boolean;
readOnly: boolean;
escapeControlCharacters: boolean;
escapeUnicodeCharacters: boolean;
flattenColumns: boolean;
}, {}>>;
export default _default;

declare type SFCWithInstall<T> = T & Plugin_2;

export { }

declare namespace _default {
    namespace head {
        let title: string;
        namespace htmlAttrs {
            let lang: string;
        }
        let meta: ({
            charset: string;
            name?: undefined;
            content?: undefined;
            hid?: undefined;
        } | {
            name: string;
            content: string;
            charset?: undefined;
            hid?: undefined;
        } | {
            hid: string;
            name: string;
            content: string;
            charset?: undefined;
        })[];
        let link: {
            rel: string;
            type: string;
            href: string;
        }[];
    }
    let css: never[];
    let plugins: never[];
    let components: boolean;
    let buildModules: string[];
    let modules: never[];
    namespace build {
        let transpile: string[];
        function extend(config: any): void;
    }
}

declare namespace _default {
    namespace head {
        let title: string;
        namespace htmlAttrs {
            let lang: string;
        }
        let meta: ({
            charset: string;
            name?: undefined;
            content?: undefined;
            hid?: undefined;
        } | {
            name: string;
            content: string;
            charset?: undefined;
            hid?: undefined;
        } | {
            hid: string;
            name: string;
            content: string;
            charset?: undefined;
        })[];
        let link: {
            rel: string;
            type: string;
            href: string;
        }[];
    }
    let css: never[];
    let plugins: never[];
    let components: boolean;
    let buildModules: string[];
    let modules: never[];
    namespace build {
        let transpile: string[];
        function extend(config: any): void;
    }
}

export namespace dev {
    let assetsSubDirectory: string;
    let assetsPublicPath: string;
    let proxyTable: {};
    let host: string;
    let port: number;
    let autoOpenBrowser: boolean;
    let errorOverlay: boolean;
    let notifyOnErrors: boolean;
    let poll: boolean;
    let devtool: string;
    let cacheBusting: boolean;
    let cssSourceMap: boolean;
}


export declare namespace transformToRequire {
    let video: string[];
    let source: string;
    let img: string;
    let image: string;
}


export namespace entry {
    let app: string;
}


export namespace output {
    let path: string;
    let filename: string;
    let publicPath: string;
}


export namespace resolve {
    let extensions: string[];
    let alias: {
        vue$: string;
        '@': string;
    };
}


export namespace module {
    let rules: ({
        test: RegExp;
        loader: string;
        options: {
            loaders: {
                css: any;
                postcss: any;
                less: any;
                sass: any;
                scss: any;
                stylus: any;
                styl: any;
            };
            cssSourceMap: boolean;
            cacheBusting: boolean;
            transformToRequire: {
                video: string[];
                source: string;
                img: string;
                image: string;
            };
        };
        include?: undefined;
    } | {
        test: RegExp;
        loader: string;
        include: string[];
        options?: undefined;
    } | {
        test: RegExp;
        loader: string;
        options: {
            limit: number;
            name: string;
        };
        include?: undefined;
    })[];
}


export namespace node {
    let setImmediate: boolean;
    let dgram: string;
    let fs: string;
    let net: string;
    let tls: string;
    let child_process: string;
}

export namespace plugins {
    let autoprefixer: {};
}

export namespace configureWebpack {
    namespace module {
        let rules: {
            test: RegExp;
            include: RegExp;
            type: string;
        }[];
    }
}

