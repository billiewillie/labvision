import { parseURL } from "ufo";
import { defineNitroPlugin } from "nitropack/dist/runtime/plugin";
import { extractAndNormaliseOgImageOptions, resolvePathCacheKey } from "../og-image/context.mjs";
import { prerenderOptionsCache } from "../og-image/cache.mjs";
import { isInternalRoute } from "../../pure.mjs";
import { createNitroRouteRuleMatcher } from "../util/kit.mjs";
export default defineNitroPlugin(async (nitro) => {
  if (!import.meta.prerender)
    return;
  nitro.hooks.hook("render:html", async (html, ctx) => {
    const { head, bodyAppend } = html;
    const path = parseURL(ctx.event.path).pathname;
    if (isInternalRoute(path))
      return;
    const routeRuleMatcher = createNitroRouteRuleMatcher();
    const routeRules = routeRuleMatcher(path);
    if (routeRules.ogImage === false)
      return;
    const options = extractAndNormaliseOgImageOptions([
      head.join("\n"),
      bodyAppend.join("\n")
    ].join("\n"));
    if (!options)
      return;
    const key = resolvePathCacheKey(ctx.event);
    await prerenderOptionsCache.setItem(key, options);
  });
});
