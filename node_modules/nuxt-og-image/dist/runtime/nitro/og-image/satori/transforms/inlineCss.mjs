import { useCssInline } from "../instances.mjs";
import { useNitroOrigin } from "#imports";
import cssInline from "#nuxt-og-image/bindings/css-inline";
export async function applyInlineCss({ e }, island) {
  let html = island.html;
  if (!cssInline.__unenv__) {
    let css = island.head.style.map((s) => s.innerHTML).join("\n");
    const componentInlineStyles = island.head.link.filter((l) => l.href.startsWith("/_nuxt/components"));
    if (process.dev) {
      const linksToCss = componentInlineStyles.length ? (await Promise.all(
        componentInlineStyles.map((l) => {
          const url = l.href.endsWith("lang.css") ? `${l.href}&hmr=false` : l.href;
          return e.$fetch(url, {
            responseType: "text",
            baseURL: useNitroOrigin(e)
          }).then((res) => {
            if (res.includes("__vite__css"))
              return res.match(/__vite__css = "([^"]+)"/)?.[1];
            return res.trim().split("\n").filter((l2) => !l2.startsWith("//")).join("\n").trim();
          }).catch(() => {
            return "";
          });
        })
      )).join("\n") : "";
      css = `${linksToCss}${css}`;
    }
    if (!css.trim().length)
      return false;
    const cssInline2 = await useCssInline();
    html = cssInline2.inline(island.html, {
      loadRemoteStylesheets: false,
      extraCss: css
    });
    const classes = css.match(/\.([a-zA-Z0-9-_]+)/g)?.map((c) => c.replace(".", ""));
    if (classes)
      html = html.replace(new RegExp(`class="(${classes.join("|")})"`, "g"), "");
    island.html = html;
    return true;
  }
  return false;
}
