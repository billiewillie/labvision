import cookie from "cookiejs";
import { computed } from "vue-demi";
export const STATE_KEY = "viewportState";
export function createViewportManager(options, state) {
  const breakpoint = computed({
    get() {
      return state.value || options.fallbackBreakpoint;
    },
    set(newBreakpoint) {
      state.value = newBreakpoint;
      if (typeof window !== "undefined" && options.cookie.name) {
        cookie.set(options.cookie.name, state.value, options.cookie);
      }
    }
  });
  const queries = computed(() => {
    const breakpoints = options.breakpoints || {};
    const breakpointsKeys = Object.keys(breakpoints).sort((a, b) => breakpoints[a] - breakpoints[b]);
    const output = {};
    let i = breakpointsKeys.length;
    while (i--) {
      const currentKey = breakpointsKeys[i];
      const size = breakpoints[currentKey];
      const nextSize = breakpoints[breakpointsKeys[i + 1]];
      const prevSize = breakpoints[breakpointsKeys[i - 1]];
      let mediaQuery = "";
      if (options.feature === "minWidth") {
        if (i > 0) {
          mediaQuery = `(min-width: ${size}px)`;
        } else {
          mediaQuery = "(min-width: 1px)";
        }
        if (nextSize) {
          mediaQuery += ` and (max-width: ${nextSize - 1}px)`;
        }
      } else {
        mediaQuery = `(max-width: ${size}px)`;
        if (prevSize) {
          mediaQuery = `(min-width: ${prevSize - 1}px) and ${mediaQuery}`;
        }
      }
      output[currentKey] = {
        mediaQuery,
        size
      };
    }
    return output;
  });
  const queriesKeys = computed(() => Object.keys(queries.value));
  return {
    breakpoint,
    breakpointValue,
    isGreaterThan,
    isGreaterOrEquals,
    isLessThan,
    match,
    matches,
    queries
  };
  function breakpointValue(searchBreakpoint) {
    const breakpoints = options.breakpoints || {};
    return breakpoints[searchBreakpoint];
  }
  function isGreaterThan(searchBreakpoint) {
    const currentIndex = queriesKeys.value.indexOf(breakpoint.value);
    const breakpointIndex = queriesKeys.value.indexOf(searchBreakpoint);
    if (breakpointIndex === -1) {
      return false;
    }
    return breakpointIndex > currentIndex;
  }
  function isGreaterOrEquals(searchBreakpoint) {
    return isGreaterThan(searchBreakpoint) || match(searchBreakpoint);
  }
  function isLessThan(searchBreakpoint) {
    const currentIndex = queriesKeys.value.indexOf(breakpoint.value);
    const breakpointIndex = queriesKeys.value.indexOf(searchBreakpoint);
    if (breakpointIndex === -1) {
      return false;
    }
    return breakpointIndex < currentIndex;
  }
  function match(breakpointToMatch) {
    return breakpoint.value === breakpointToMatch;
  }
  function matches(...breakpointsToMatch) {
    return breakpointsToMatch.includes(breakpoint.value);
  }
}
