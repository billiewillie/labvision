import * as _nuxt_schema from '@nuxt/schema';
import { FetchResponse } from 'ofetch';
import { SiteConfigResolved } from 'site-config-stack';
import Fuse from 'fuse.js';
import { ParsedURL } from 'ufo';

interface Rule {
    test: (ctx: RuleTestContext) => void;
}
interface RuleTestContext {
    link: string;
    url: ParsedURL;
    textContent: string;
    ids: string[];
    fromPath: string;
    response: FetchResponse<any>;
    siteConfig: SiteConfigResolved;
    pageSearch?: Fuse<string>;
    report: (report: RuleReport) => void;
    skipInspections?: string[];
}
interface RuleReport {
    name: string;
    scope: 'error' | 'warning';
    message: string;
    fix?: string;
    fixDescription?: string;
    tip?: string;
    canRetry?: boolean;
}

declare const DefaultInspections: {
    readonly 'missing-hash': Rule;
    readonly 'no-error-response': Rule;
    readonly 'no-baseless': Rule;
    readonly 'no-javascript': Rule;
    readonly 'trailing-slash': Rule;
    readonly 'absolute-site-urls': Rule;
    readonly redirects: Rule;
    readonly 'link-text': Rule;
};

interface ModuleOptions {
    /**
     * Whether the build should fail when a 404 is encountered.
     */
    failOnError: boolean;
    /**
     * Skip specific inspections from running.
     */
    skipInspections: (Partial<keyof typeof DefaultInspections>)[];
    /**
     * The timeout for fetching a URL.
     *
     * @default 5000
     */
    fetchTimeout: number;
    /**
     * Links to ignore when running inspections.
     */
    excludeLinks: string[];
    /**
     * Generate a report when using nuxt build` or `nuxt generate`.
     */
    report?: {
        /**
         * Whether to output a HTML report.
         */
        html?: boolean;
        /**
         * Whether to output a JSON report.
         */
        markdown?: boolean;
    };
    /**
     * Whether to show live inspections in your Nuxt app.
     */
    showLiveInspections: boolean;
    /**
     * Whether to run the module on `nuxt build` or `nuxt generate`.
     */
    runOnBuild: boolean;
    /**
     * Should remote URLs be fetched.
     *
     * @default true (disabled in stackblitz)
     */
    fetchRemoteUrls: boolean;
    /**
     * Enable when your nuxt/content files match your pages. This will automatically detect link sources
     * for the current page.
     *
     * This is the same behavior to using `nuxt/content` with `documentDriven: true`.
     */
    strictNuxtContentPaths: boolean;
    /**
     * Whether the module is enabled.
     *
     * @default true
     */
    enabled: boolean;
    /**
     * Display debug information.
     *
     * @default false
     */
    debug: boolean;
}
interface ModuleHooks {
}
declare const _default: _nuxt_schema.NuxtModule<ModuleOptions>;

export { type ModuleHooks, type ModuleOptions, _default as default };
